syntax = "proto3";

package studio_project_manager.plugins;

import "common.proto";

service PluginService {
  rpc GetAllPlugins(GetAllPluginsRequest) returns (GetAllPluginsResponse);
  rpc GetPluginByInstalledStatus(GetPluginByInstalledStatusRequest)
      returns (GetPluginByInstalledStatusResponse);
  rpc SearchPlugins(SearchPluginsRequest) returns (SearchPluginsResponse);
  rpc GetPluginStats(GetPluginStatsRequest) returns (GetPluginStatsResponse);
  rpc GetProjectsByPlugin(GetProjectsByPluginRequest)
      returns (GetProjectsByPluginResponse);
  rpc RefreshPluginInstallationStatus(RefreshPluginInstallationStatusRequest)
      returns (RefreshPluginInstallationStatusResponse);
}

message GetAllPluginsRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
  optional string sort_by = 3;  // name, vendor, installed, usage_count
  optional bool sort_desc = 4;
}

message GetAllPluginsResponse {
  repeated studio_project_manager.common.Plugin plugins = 1;
  int32 total_count = 2;
}

// Filter by Status
message GetPluginByInstalledStatusRequest {
  bool installed = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
  optional string sort_by = 4;
  optional bool sort_desc = 5;
}

message GetPluginByInstalledStatusResponse {
  repeated studio_project_manager.common.Plugin plugins = 1;
  int32 total_count = 2;
}

// Search
message SearchPluginsRequest {
  string query = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
  optional bool installed_only = 4;
  optional string vendor_filter = 5;
  optional string format_filter = 6;
}

message SearchPluginsResponse {
  repeated studio_project_manager.common.Plugin plugins = 1;
  int32 total_count = 2;
}

// Stats for Status Bar
message GetPluginStatsRequest {}

message GetPluginStatsResponse {
  int32 total_plugins = 1;
  int32 installed_plugins = 2;
  int32 missing_plugins = 3;
  int32 unique_vendors = 4;
  map<string, int32> plugins_by_format = 5;  // VST3, VST, AU, etc.
  map<string, int32> plugins_by_vendor = 6;
}



message GetProjectsByPluginRequest {
  string plugin_id = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
}

message GetProjectsByPluginResponse {
  repeated studio_project_manager.common.Project projects = 1;
  int32 total_count = 2;
}

// Plugin Installation Status Refresh
message RefreshPluginInstallationStatusRequest {}

message RefreshPluginInstallationStatusResponse {
  int32 total_plugins_checked = 1;
  int32 plugins_now_installed = 2;
  int32 plugins_now_missing = 3;
  int32 plugins_unchanged = 4;
  bool success = 5;
  optional string error_message = 6;
}