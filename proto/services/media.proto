syntax = "proto3";

package seula.media;

import "common.proto";

// Media Management Service
service MediaService {
  // Media Management
  rpc UploadCoverArt(stream UploadCoverArtRequest)
      returns (UploadCoverArtResponse);
  rpc UploadAudioFile(stream UploadAudioFileRequest)
      returns (UploadAudioFileResponse);
  rpc DownloadMedia(DownloadMediaRequest)
      returns (stream DownloadMediaResponse);
  rpc DeleteMedia(DeleteMediaRequest) returns (DeleteMediaResponse);
  rpc SetProjectAudioFile(SetProjectAudioFileRequest)
      returns (SetProjectAudioFileResponse);
  rpc RemoveProjectAudioFile(RemoveProjectAudioFileRequest)
      returns (RemoveProjectAudioFileResponse);

  // Media listing and management
  rpc ListMediaFiles(ListMediaFilesRequest) returns (ListMediaFilesResponse);
  rpc GetMediaFilesByType(GetMediaFilesByTypeRequest)
      returns (GetMediaFilesByTypeResponse);
  rpc GetOrphanedMediaFiles(GetOrphanedMediaFilesRequest)
      returns (GetOrphanedMediaFilesResponse);
  rpc GetMediaStatistics(GetMediaStatisticsRequest)
      returns (GetMediaStatisticsResponse);
  rpc CleanupOrphanedMedia(CleanupOrphanedMediaRequest)
      returns (CleanupOrphanedMediaResponse);
}

// Copy these request/response messages from your original
// seula.proto:

message UploadAudioFileRequest {
  oneof data {
    string project_id = 1;
    bytes chunk = 2;
    string filename = 3;
  }
}

message UploadAudioFileResponse {
  string media_file_id = 1;
  bool success = 2;
  optional string error_message = 3;
}

message DownloadMediaRequest {
  string media_file_id = 1;
}

message DownloadMediaResponse {
  oneof data {
    seula.common.MediaFile metadata = 1;
    bytes chunk = 2;
  }
}

message DeleteMediaRequest {
  string media_file_id = 1;
}

message DeleteMediaResponse {
  bool success = 1;
  optional string error_message = 2;
}

// Project Audio File Messages
message SetProjectAudioFileRequest {
  string project_id = 1;
  string media_file_id = 2;
}

message SetProjectAudioFileResponse {
  bool success = 1;
  optional string error_message = 2;
}

message RemoveProjectAudioFileRequest {
  string project_id = 1;
}

message RemoveProjectAudioFileResponse {
  bool success = 1;
  optional string error_message = 2;
}

// Media listing and management messages
message ListMediaFilesRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message ListMediaFilesResponse {
  repeated seula.common.MediaFile media_files = 1;
  int32 total_count = 2;
}

message GetMediaFilesByTypeRequest {
  string media_type = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
}

message GetMediaFilesByTypeResponse {
  repeated seula.common.MediaFile media_files = 1;
  int32 total_count = 2;
}

message GetOrphanedMediaFilesRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message GetOrphanedMediaFilesResponse {
  repeated seula.common.MediaFile orphaned_files = 1;
  int32 total_count = 2;
}

message GetMediaStatisticsRequest {}

message GetMediaStatisticsResponse {
  int32 total_files = 1;
  int64 total_size_bytes = 2;
  int32 cover_art_count = 3;
  int32 audio_file_count = 4;
  int32 orphaned_files_count = 5;
  int64 orphaned_files_size_bytes = 6;
  map<string, int32> files_by_type = 7;
}

message CleanupOrphanedMediaRequest {
  bool dry_run = 1;
}

message CleanupOrphanedMediaResponse {
  int32 files_cleaned = 1;
  int64 bytes_freed = 2;
  repeated string deleted_file_ids = 3;
  bool success = 4;
  optional string error_message = 5;
}
// Media Management Messages
message UploadCoverArtRequest {
  oneof data {
    string collection_id = 1;
    bytes chunk = 2;
    string filename = 3;
  }
}

message UploadCoverArtResponse {
  string media_file_id = 1;
  bool success = 2;
  optional string error_message = 3;
}