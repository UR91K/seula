syntax = "proto3";

package seula.collections;

import "common.proto";

// Collections Management Service
service CollectionService {
  // Collections
  rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse);
  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse);
  rpc CreateCollection(CreateCollectionRequest)
      returns (CreateCollectionResponse);
  rpc UpdateCollection(UpdateCollectionRequest)
      returns (UpdateCollectionResponse);
  rpc DeleteCollection(DeleteCollectionRequest)
      returns (DeleteCollectionResponse);
  rpc DuplicateCollection(DuplicateCollectionRequest)
      returns (DuplicateCollectionResponse);
  rpc AddProjectToCollection(AddProjectToCollectionRequest)
      returns (AddProjectToCollectionResponse);
  rpc RemoveProjectFromCollection(RemoveProjectFromCollectionRequest)
      returns (RemoveProjectFromCollectionResponse);
  rpc ReorderCollection(ReorderCollectionRequest)
      returns (ReorderCollectionResponse);
  rpc GetCollectionTasks(GetCollectionTasksRequest)
      returns (GetCollectionTasksResponse);
  rpc SearchCollections(SearchCollectionsRequest)
      returns (SearchCollectionsResponse);
  rpc GetCollectionStatistics(GetCollectionStatisticsRequest)
      returns (GetCollectionStatisticsResponse);

  // Batch Collections
  rpc BatchAddToCollection(BatchAddToCollectionRequest)
      returns (BatchAddToCollectionResponse);
  rpc BatchRemoveFromCollection(BatchRemoveFromCollectionRequest)
      returns (BatchRemoveFromCollectionResponse);
  rpc BatchCreateCollectionFrom(BatchCreateCollectionFromRequest)
      returns (BatchCreateCollectionFromResponse);

  // Collections media management
  rpc SetCollectionCoverArt(SetCollectionCoverArtRequest)
      returns (SetCollectionCoverArtResponse);
  rpc RemoveCollectionCoverArt(RemoveCollectionCoverArtRequest)
      returns (RemoveCollectionCoverArtResponse);
}

// Collections
message GetCollectionsRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
  optional string sort_by = 3;
  optional bool sort_desc = 4;
}

message GetCollectionsResponse {
  repeated seula.common.Collection collections = 1;
  int32 total_count = 2;
}

message GetCollectionRequest {
  string collection_id = 1;
}

message GetCollectionResponse {
  optional seula.common.Collection collection = 1;
}

message CreateCollectionRequest {
  string name = 1;
  optional string description = 2;
  optional string notes = 3;
}

message CreateCollectionResponse {
  seula.common.Collection collection = 1;
}

message UpdateCollectionRequest {
  string collection_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string notes = 4;
}

message UpdateCollectionResponse {
  seula.common.Collection collection = 1;
}

message DeleteCollectionRequest {
  string collection_id = 1;
}

message DeleteCollectionResponse {
  bool success = 1;
}

message DuplicateCollectionRequest {
  string collection_id = 1;
  string new_name = 2;
  optional string new_description = 3;
  optional string new_notes = 4;
}

message DuplicateCollectionResponse {
  seula.common.Collection collection = 1;
}

message AddProjectToCollectionRequest {
  string collection_id = 1;
  string project_id = 2;
  optional int32 position = 3;
}

message AddProjectToCollectionResponse {
  bool success = 1;
}

message RemoveProjectFromCollectionRequest {
  string collection_id = 1;
  string project_id = 2;
}

message RemoveProjectFromCollectionResponse {
  bool success = 1;
}

message ReorderCollectionRequest {
  string collection_id = 1;
  repeated string project_ids = 2;
}

message ReorderCollectionResponse {
  bool success = 1;
}

message GetCollectionTasksRequest {
  string collection_id = 1;
}

message GetCollectionTasksResponse {
  repeated seula.common.Task tasks = 1;
  int32 total_tasks = 2;
  int32 completed_tasks = 3;
  int32 pending_tasks = 4;
  double completion_rate = 5;
}

// Collection Search Messages
message SearchCollectionsRequest {
  string query = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
}

message SearchCollectionsResponse {
  repeated seula.common.Collection collections = 1;
  int32 total_count = 2;
}

// Collection Statistics Messages
message GetCollectionStatisticsRequest {
  string collection_id = 1;
}

message GetCollectionStatisticsResponse {
  int32 project_count = 1;
  optional double total_duration_seconds = 2;
  optional double average_tempo = 3;
  int32 total_plugins = 4;
  int32 total_samples = 5;
  int32 total_tags = 6;
  optional string most_common_key = 7;
  optional string most_common_time_signature = 8;
}

// Collection Cover Art Messages
message SetCollectionCoverArtRequest {
  string collection_id = 1;
  string media_file_id = 2;
}

message SetCollectionCoverArtResponse {
  bool success = 1;
  optional string error_message = 2;
}

message RemoveCollectionCoverArtRequest {
  string collection_id = 1;
}

message RemoveCollectionCoverArtResponse {
  bool success = 1;
  optional string error_message = 2;
}

// Batch Collections
message BatchAddToCollectionRequest {
  repeated string project_ids = 1;
  string collection_id = 2;
}

message BatchAddToCollectionResponse {
  repeated seula.common.BatchOperationResult results = 1;
  int32 successful_count = 2;
  int32 failed_count = 3;
}

message BatchRemoveFromCollectionRequest {
  repeated string project_ids = 1;
  string collection_id = 2;
}

message BatchRemoveFromCollectionResponse {
  repeated seula.common.BatchOperationResult results = 1;
  int32 successful_count = 2;
  int32 failed_count = 3;
}

message BatchCreateCollectionFromRequest {
  string collection_name = 1;
  repeated string project_ids = 2;
  optional string description = 3;
  optional string notes = 4;
}

message BatchCreateCollectionFromResponse {
  seula.common.Collection collection = 1;
  repeated seula.common.BatchOperationResult results = 2;
  int32 successful_count = 3;
  int32 failed_count = 4;
}