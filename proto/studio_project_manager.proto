syntax = "proto3";

package studio_project_manager;

// Main service for managing Ableton Live projects
service StudioProjectManager {
  // Project Management
  rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse);
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse);
  rpc UpdateProjectNotes(UpdateProjectNotesRequest) returns (UpdateProjectNotesResponse);
  rpc UpdateProjectName(UpdateProjectNameRequest) returns (UpdateProjectNameResponse);
  rpc MarkProjectDeleted(MarkProjectDeletedRequest) returns (MarkProjectDeletedResponse);
  rpc ReactivateProject(ReactivateProjectRequest) returns (ReactivateProjectResponse);
  rpc GetProjectsByDeletionStatus(GetProjectsByDeletionStatusRequest) returns (GetProjectsByDeletionStatusResponse);
  rpc PermanentlyDeleteProject(PermanentlyDeleteProjectRequest) returns (PermanentlyDeleteProjectResponse);
  
  // Search
  rpc Search(SearchRequest) returns (SearchResponse);
  
  // Scanning
  rpc ScanDirectories(ScanDirectoriesRequest) returns (stream ScanProgressResponse);
  rpc GetScanStatus(GetScanStatusRequest) returns (GetScanStatusResponse);
  rpc AddSingleProject(AddSingleProjectRequest) returns (AddSingleProjectResponse);
  
  // Collections
  rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse);
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  rpc UpdateCollection(UpdateCollectionRequest) returns (UpdateCollectionResponse);
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse);
  rpc AddProjectToCollection(AddProjectToCollectionRequest) returns (AddProjectToCollectionResponse);
  rpc RemoveProjectFromCollection(RemoveProjectFromCollectionRequest) returns (RemoveProjectFromCollectionResponse);
  rpc GetCollectionTasks(GetCollectionTasksRequest) returns (GetCollectionTasksResponse);
  
  // Tags
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse);
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse);
  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse);
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse);
  rpc TagProject(TagProjectRequest) returns (TagProjectResponse);
  rpc UntagProject(UntagProjectRequest) returns (UntagProjectResponse);
  
  // Tasks
  rpc GetProjectTasks(GetProjectTasksRequest) returns (GetProjectTasksResponse);
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);
  rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse);
  rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse);
  
  // File Watching
  rpc StartWatcher(StartWatcherRequest) returns (StartWatcherResponse);
  rpc StopWatcher(StopWatcherRequest) returns (StopWatcherResponse);
  rpc GetWatcherEvents(GetWatcherEventsRequest) returns (stream WatcherEventResponse);
  
  // System Info
  rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse);
  rpc GetStatistics(GetStatisticsRequest) returns (GetStatisticsResponse);
  rpc ExportStatistics(ExportStatisticsRequest) returns (ExportStatisticsResponse);
  
  // Media Management
  rpc UploadCoverArt(stream UploadCoverArtRequest) returns (UploadCoverArtResponse);
  rpc UploadAudioFile(stream UploadAudioFileRequest) returns (UploadAudioFileResponse);
  rpc DownloadMedia(DownloadMediaRequest) returns (stream DownloadMediaResponse);
  rpc DeleteMedia(DeleteMediaRequest) returns (DeleteMediaResponse);
  rpc SetCollectionCoverArt(SetCollectionCoverArtRequest) returns (SetCollectionCoverArtResponse);
  rpc RemoveCollectionCoverArt(RemoveCollectionCoverArtRequest) returns (RemoveCollectionCoverArtResponse);
  rpc SetProjectAudioFile(SetProjectAudioFileRequest) returns (SetProjectAudioFileResponse);
  rpc RemoveProjectAudioFile(RemoveProjectAudioFileRequest) returns (RemoveProjectAudioFileResponse);
  
  // Media listing and management
  rpc ListMediaFiles(ListMediaFilesRequest) returns (ListMediaFilesResponse);
  rpc GetMediaFilesByType(GetMediaFilesByTypeRequest) returns (GetMediaFilesByTypeResponse);
  rpc GetOrphanedMediaFiles(GetOrphanedMediaFilesRequest) returns (GetOrphanedMediaFilesResponse);
  rpc GetMediaStatistics(GetMediaStatisticsRequest) returns (GetMediaStatisticsResponse);
  rpc CleanupOrphanedMedia(CleanupOrphanedMediaRequest) returns (CleanupOrphanedMediaResponse);
}

// Core Data Types
message Project {
  string id = 1;
  string name = 2;
  string path = 3;
  string hash = 4;
  string notes = 5;
  int64 created_at = 6;
  int64 modified_at = 7;
  int64 last_parsed_at = 8;
  
  // Musical properties
  double tempo = 9;
  TimeSignature time_signature = 10;
  KeySignature key_signature = 11;
  optional double duration_seconds = 12;
  optional double furthest_bar = 13;
  
  // Ableton version
  AbletonVersion ableton_version = 14;
  
  // Related data
  repeated Plugin plugins = 15;
  repeated Sample samples = 16;
  repeated Tag tags = 17;
  repeated Task tasks = 18;
  repeated string collection_ids = 19;
  optional string audio_file_id = 20;
}

message Plugin {
  string id = 1;
  optional int32 ableton_plugin_id = 2;
  optional int32 ableton_module_id = 3;
  string dev_identifier = 4;
  string name = 5;
  string format = 6;
  bool installed = 7;
  optional string vendor = 8;
  optional string version = 9;
  optional string sdk_version = 10;
  optional int32 flags = 11;
  optional int32 scanstate = 12;
  optional int32 enabled = 13;
}

message Sample {
  string id = 1;
  string name = 2;
  string path = 3;
  bool is_present = 4;
}

message Tag {
  string id = 1;
  string name = 2;
  int64 created_at = 3;
}

message Task {
  string id = 1;
  string project_id = 2;
  string description = 3;
  bool completed = 4;
  int64 created_at = 5;
}

message Collection {
  string id = 1;
  string name = 2;
  optional string description = 3;
  optional string notes = 4;
  int64 created_at = 5;
  int64 modified_at = 6;
  repeated string project_ids = 7;
  optional string cover_art_id = 8;
  optional double total_duration_seconds = 9;
  int32 project_count = 10;
}

message TimeSignature {
  int32 numerator = 1;
  int32 denominator = 2;
}

message KeySignature {
  string tonic = 1;
  string scale = 2;
}

message AbletonVersion {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 patch = 3;
  bool beta = 4;
}

message MediaFile {
  string id = 1;
  string original_filename = 2;
  string file_extension = 3;
  string media_type = 4;
  int64 file_size_bytes = 5;
  string mime_type = 6;
  int64 uploaded_at = 7;
  string checksum = 8;
}

message DateRange {
  int64 start_timestamp = 1;
  int64 end_timestamp = 2;
}

// Request/Response Messages

// Project Management
message GetProjectsRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
  optional string sort_by = 3;
  optional bool sort_desc = 4;
}

message GetProjectsResponse {
  repeated Project projects = 1;
  int32 total_count = 2;
}

message GetProjectRequest {
  string project_id = 1;
}

message GetProjectResponse {
  optional Project project = 1;
}

message UpdateProjectNotesRequest {
  string project_id = 1;
  string notes = 2;
}

message UpdateProjectNotesResponse {
  bool success = 1;
}

message UpdateProjectNameRequest {
  string project_id = 1;
  string name = 2;
}

message UpdateProjectNameResponse {
  bool success = 1;
}

message MarkProjectDeletedRequest {
  string project_id = 1;
}

message MarkProjectDeletedResponse {
  bool success = 1;
}

message ReactivateProjectRequest {
  string project_id = 1;
}

message ReactivateProjectResponse {
  bool success = 1;
}

message GetProjectsByDeletionStatusRequest {
  bool is_deleted = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
}

message GetProjectsByDeletionStatusResponse {
  repeated Project projects = 1;
  int32 total_count = 2;
}

message PermanentlyDeleteProjectRequest {
  string project_id = 1;
}

message PermanentlyDeleteProjectResponse {
  bool success = 1;
}

// Search
message SearchRequest {
  string query = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
}

message SearchResponse {
  repeated Project projects = 1;
  int32 total_count = 2;
}

// Scanning
message ScanDirectoriesRequest {
  repeated string paths = 1;
  optional bool force_rescan = 2;
}

message ScanProgressResponse {
  uint32 completed = 1;
  uint32 total = 2;
  float progress = 3;
  string message = 4;
  ScanStatus status = 5;
}

enum ExportFormat {
  EXPORT_CSV = 0;
}

enum ScanStatus {
  SCAN_UNKNOWN = 0;
  SCAN_STARTING = 1;
  SCAN_DISCOVERING = 2;
  SCAN_PARSING = 3;
  SCAN_INSERTING = 4;
  SCAN_COMPLETED = 5;
  SCAN_ERROR = 6;
}

message GetScanStatusRequest {}

message GetScanStatusResponse {
  ScanStatus status = 1;
  optional ScanProgressResponse current_progress = 2;
}

message AddSingleProjectRequest {
  string file_path = 1;
}

message AddSingleProjectResponse {
  bool success = 1;
  optional Project project = 2;
  optional string error_message = 3;
}

// Collections
message GetCollectionsRequest {}

message GetCollectionsResponse {
  repeated Collection collections = 1;
}

message CreateCollectionRequest {
  string name = 1;
  optional string description = 2;
  optional string notes = 3;
}

message CreateCollectionResponse {
  Collection collection = 1;
}

message UpdateCollectionRequest {
  string collection_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string notes = 4;
}

message UpdateCollectionResponse {
  Collection collection = 1;
}

message DeleteCollectionRequest {
  string collection_id = 1;
}

message DeleteCollectionResponse {
  bool success = 1;
}

message AddProjectToCollectionRequest {
  string collection_id = 1;
  string project_id = 2;
  optional int32 position = 3;
}

message AddProjectToCollectionResponse {
  bool success = 1;
}

message RemoveProjectFromCollectionRequest {
  string collection_id = 1;
  string project_id = 2;
}

message RemoveProjectFromCollectionResponse {
  bool success = 1;
}

message GetCollectionTasksRequest {
  string collection_id = 1;
}

message GetCollectionTasksResponse {
  repeated Task tasks = 1;
  int32 total_tasks = 2;
  int32 completed_tasks = 3;
  int32 pending_tasks = 4;
  double completion_rate = 5;
}

// Tags
message GetTagsRequest {}

message GetTagsResponse {
  repeated Tag tags = 1;
}

message CreateTagRequest {
  string name = 1;
}

message CreateTagResponse {
  Tag tag = 1;
}

message UpdateTagRequest {
  string tag_id = 1;
  string name = 2;
}

message UpdateTagResponse {
  Tag tag = 1;
}

message DeleteTagRequest {
  string tag_id = 1;
}

message DeleteTagResponse {
  bool success = 1;
}

message TagProjectRequest {
  string project_id = 1;
  string tag_id = 2;
}

message TagProjectResponse {
  bool success = 1;
}

message UntagProjectRequest {
  string project_id = 1;
  string tag_id = 2;
}

message UntagProjectResponse {
  bool success = 1;
}

// Tasks
message GetProjectTasksRequest {
  string project_id = 1;
}

message GetProjectTasksResponse {
  repeated Task tasks = 1;
}

message CreateTaskRequest {
  string project_id = 1;
  string description = 2;
}

message CreateTaskResponse {
  Task task = 1;
}

message UpdateTaskRequest {
  string task_id = 1;
  optional string description = 2;
  optional bool completed = 3;
}

message UpdateTaskResponse {
  Task task = 1;
}

message DeleteTaskRequest {
  string task_id = 1;
}

message DeleteTaskResponse {
  bool success = 1;
}

// File Watching
message StartWatcherRequest {
  repeated string paths = 1;
}

message StartWatcherResponse {
  bool success = 1;
}

message StopWatcherRequest {}

message StopWatcherResponse {
  bool success = 1;
}

message GetWatcherEventsRequest {}

message WatcherEventResponse {
  WatcherEventType event_type = 1;
  string path = 2;
  optional string new_path = 3;
  int64 timestamp = 4;
}

enum WatcherEventType {
  WATCHER_UNKNOWN = 0;
  WATCHER_CREATED = 1;
  WATCHER_MODIFIED = 2;
  WATCHER_DELETED = 3;
  WATCHER_RENAMED = 4;
}

// System Info
message GetSystemInfoRequest {}

message GetSystemInfoResponse {
  string version = 1;
  repeated string watch_paths = 2;
  bool watcher_active = 3;
  int64 uptime_seconds = 4;
}

message GetStatisticsRequest {
  optional DateRange date_range = 1;
  repeated string collection_ids = 2;
  repeated string tag_ids = 3;
  optional string ableton_version_filter = 4;
}

message GetStatisticsResponse {
  // Basic counts
  int32 total_projects = 1;
  int32 total_plugins = 2;
  int32 total_samples = 3;
  int32 total_collections = 4;
  int32 total_tags = 5;
  int32 total_tasks = 6;
  
  // Plugin statistics
  repeated PluginStatistic top_plugins = 7;
  repeated VendorStatistic top_vendors = 8;
  
  // Musical statistics
  repeated TempoStatistic tempo_distribution = 9;
  repeated KeyStatistic key_distribution = 10;
  repeated TimeSignatureStatistic time_signature_distribution = 11;
  
  // Project analytics
  repeated YearStatistic projects_per_year = 12;
  repeated MonthStatistic projects_per_month = 13;
  double average_monthly_projects = 14;
  
  // Duration analytics
  double average_project_duration_seconds = 15;
  int32 projects_under_40_seconds = 16;
  Project longest_project = 17;
  
  // Complexity metrics
  repeated ProjectComplexityStatistic most_complex_projects = 18;
  double average_plugins_per_project = 19;
  double average_samples_per_project = 20;
  
  // Sample statistics
  repeated SampleStatistic top_samples = 21;
  
  // Tag statistics
  repeated TagStatistic top_tags = 22;
  
  // Task statistics
  int32 completed_tasks = 23;
  int32 pending_tasks = 24;
  double task_completion_rate = 25;
  
  // Activity trends
  repeated ActivityTrendStatistic recent_activity = 26;
  
  // Version analytics
  repeated VersionStatistic ableton_versions = 27;
  
  // Collection statistics
  double average_projects_per_collection = 28;
  Collection largest_collection = 29;
  
  // Historical task analytics
  repeated TaskCompletionTrendStatistic task_completion_trends = 30;
}

message ExportStatisticsRequest {
  ExportFormat format = 1;
  optional GetStatisticsRequest filters = 2;
}

message ExportStatisticsResponse {
  bytes data = 1;
  string filename = 2;
  bool success = 3;
  optional string error_message = 4;
}

message PluginStatistic {
  string name = 1;
  string vendor = 2;
  int32 usage_count = 3;
}

message TempoStatistic {
  double tempo = 1;
  int32 count = 2;
}

message KeyStatistic {
  string key = 1;
  int32 count = 2;
}

message VendorStatistic {
  string vendor = 1;
  int32 plugin_count = 2;
  int32 usage_count = 3;
}

message TimeSignatureStatistic {
  int32 numerator = 1;
  int32 denominator = 2;
  int32 count = 3;
}

message YearStatistic {
  int32 year = 1;
  int32 count = 2;
}

message MonthStatistic {
  int32 year = 1;
  int32 month = 2;
  int32 count = 3;
}

message ProjectComplexityStatistic {
  Project project = 1;
  int32 plugin_count = 2;
  int32 sample_count = 3;
  int32 complexity_score = 4;
}

message SampleStatistic {
  string name = 1;
  string path = 2;
  int32 usage_count = 3;
}

message TagStatistic {
  string name = 1;
  int32 usage_count = 2;
}

message ActivityTrendStatistic {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
  int32 projects_created = 4;
  int32 projects_modified = 5;
}

message VersionStatistic {
  string version = 1;
  int32 count = 2;
}

message TaskCompletionTrendStatistic {
  int32 year = 1;
  int32 month = 2;
  int32 completed_tasks = 3;
  int32 total_tasks = 4;
  double completion_rate = 5;
}

// Media Management Messages
message UploadCoverArtRequest {
  oneof data {
    string collection_id = 1;
    bytes chunk = 2;
    string filename = 3;
  }
}

message UploadCoverArtResponse {
  string media_file_id = 1;
  bool success = 2;
  optional string error_message = 3;
}

message UploadAudioFileRequest {
  oneof data {
    string project_id = 1;
    bytes chunk = 2;
    string filename = 3;
  }
}

message UploadAudioFileResponse {
  string media_file_id = 1;
  bool success = 2;
  optional string error_message = 3;
}

message DownloadMediaRequest {
  string media_file_id = 1;
}

message DownloadMediaResponse {
  oneof data {
    MediaFile metadata = 1;
    bytes chunk = 2;
  }
}

message DeleteMediaRequest {
  string media_file_id = 1;
}

message DeleteMediaResponse {
  bool success = 1;
  optional string error_message = 2;
}

// Collection Cover Art Messages
message SetCollectionCoverArtRequest {
  string collection_id = 1;
  string media_file_id = 2;
}

message SetCollectionCoverArtResponse {
  bool success = 1;
  optional string error_message = 2;
}

message RemoveCollectionCoverArtRequest {
  string collection_id = 1;
}

message RemoveCollectionCoverArtResponse {
  bool success = 1;
  optional string error_message = 2;
}

// Project Audio File Messages
message SetProjectAudioFileRequest {
  string project_id = 1;
  string media_file_id = 2;
}

message SetProjectAudioFileResponse {
  bool success = 1;
  optional string error_message = 2;
}

message RemoveProjectAudioFileRequest {
  string project_id = 1;
}

message RemoveProjectAudioFileResponse {
  bool success = 1;
  optional string error_message = 2;
} 

// Media listing and management messages
message ListMediaFilesRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message ListMediaFilesResponse {
  repeated MediaFile media_files = 1;
  int32 total_count = 2;
}

message GetMediaFilesByTypeRequest {
  string media_type = 1;
  optional int32 limit = 2;
  optional int32 offset = 3;
}

message GetMediaFilesByTypeResponse {
  repeated MediaFile media_files = 1;
  int32 total_count = 2;
}

message GetOrphanedMediaFilesRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message GetOrphanedMediaFilesResponse {
  repeated MediaFile orphaned_files = 1;
  int32 total_count = 2;
}

message GetMediaStatisticsRequest {
}

message GetMediaStatisticsResponse {
  int32 total_files = 1;
  int64 total_size_bytes = 2;
  int32 cover_art_count = 3;
  int32 audio_file_count = 4;
  int32 orphaned_files_count = 5;
  int64 orphaned_files_size_bytes = 6;
  map<string, int32> files_by_type = 7;
}

message CleanupOrphanedMediaRequest {
  bool dry_run = 1;
}

message CleanupOrphanedMediaResponse {
  int32 files_cleaned = 1;
  int64 bytes_freed = 2;
  repeated string deleted_file_ids = 3;
  bool success = 4;
  optional string error_message = 5;
} 